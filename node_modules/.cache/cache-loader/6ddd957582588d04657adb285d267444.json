{"remainingRequest":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/pi/ScummDocs/docs/advanced/configuration.md","dependencies":[{"path":"/home/pi/ScummDocs/docs/advanced/configuration.md","mtime":1591408668741},{"path":"/home/pi/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-advanced-configuration-md-97a.json","mtime":1591505697733},{"path":"/home/pi/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1590024424537},{"path":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1590024424411},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1590024555727},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1590024553437}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}