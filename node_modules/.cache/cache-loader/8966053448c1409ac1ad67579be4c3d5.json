{"remainingRequest":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/ubuntu/ScummDocs/docs/advanced/configuration_file.md","dependencies":[{"path":"/home/ubuntu/ScummDocs/docs/advanced/configuration_file.md","mtime":1593044979113},{"path":"/home/ubuntu/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-advanced-configuration-file-md-d44.json","mtime":1593076788704},{"path":"/home/ubuntu/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1593044981332},{"path":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1593044981124},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1593044980177},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1593044980217}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvdWJ1bnR1L1NjdW1tRG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidjb25maWd1cmF0aW9uJyx0aXRsZTonVGhlIGNvbmZpZ3VyYXRpb24gZmlsZScsc2lkZWJhcl9sYWJlbDonVGhlIGNvbmZpZ3VyYXRpb24gZmlsZSd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17ImlkIjoiYWR2YW5jZWQvY29uZmlndXJhdGlvbiIsInRpdGxlIjoiVGhlIGNvbmZpZ3VyYXRpb24gZmlsZSIsImRlc2NyaXB0aW9uIjoiTG9jYXRpb24iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2FkdmFuY2VkL2NvbmZpZ3VyYXRpb25fZmlsZS5tZCIsInBlcm1hbGluayI6Ii9TY3VtbURvY3MvYWR2YW5jZWQvY29uZmlndXJhdGlvbiIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vU2N1bW1Eb2NzL2RvY3MvYWR2YW5jZWQvY29uZmlndXJhdGlvbl9maWxlLm1kIiwic2lkZWJhcl9sYWJlbCI6IlRoZSBjb25maWd1cmF0aW9uIGZpbGUiLCJzaWRlYmFyIjoic29tZVNpZGVCYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkNvbW1hbmQgbGluZSBvcHRpb25zIiwicGVybWFsaW5rIjoiL1NjdW1tRG9jcy9hZHZhbmNlZC9jb21tYW5kX2xpbmUifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTonTG9jYXRpb24nLGlkOidsb2NhdGlvbicsY2hpbGRyZW46W119LHt2YWx1ZTonS2V5d29yZHMnLGlkOidrZXl3b3JkcycsY2hpbGRyZW46W119LHt2YWx1ZTonRXhhbXBsZSBmaWxlJyxpZDonZXhhbXBsZS1maWxlJyxjaGlsZHJlbjpbXX1dO2NvbnN0IG1ha2VTaG9ydGNvZGU9bmFtZT0+ZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307Y29uc3QgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgyIix7ImlkIjoibG9jYXRpb24ifSxgTG9jYXRpb25gKSxtZHgoInAiLG51bGwsYFRoZSBjb25maWd1cmF0aW9uIGZpbGUgc2F2ZXMgdG8gZGlmZmVyZW50IGRlZmF1bHQgbG9jYXRpb25zIGRlcGVuZGluZyBvbiB0aGUgcGxhdGZvcm0gb24gd2hpY2ggeW91IGFyZSBydW5uaW5nIFNjdW1tVk0uIGApLG1keCgidGFibGUiLG51bGwsbWR4KCJ0aGVhZCIse3BhcmVudE5hbWU6InRhYmxlIn0sbWR4KCJ0ciIse3BhcmVudE5hbWU6InRoZWFkIn0sbWR4KCJ0aCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6bnVsbH0pLGBQbGF0Zm9ybWApLG1keCgidGgiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSxgQ29uZmlnIEZpbGUgUGF0aGApKSksbWR4KCJ0Ym9keSIse3BhcmVudE5hbWU6InRhYmxlIn0pKSxtZHgoInAiLG51bGwsYHxgKSxtZHgoInAiLG51bGwsYE1vc3Qgc2V0dGluZ3MgYXJlIGFsc28gYWNjZXNzaWJsZSBkaXJlY3RseSBmcm9tIHRoZSBMYXVuY2hlci4gVG8gZWRpdCBnbG9iYWwgc2V0dGluZ3MsIGNsaWNrIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYE9wdGlvbnNgKSxgLiBUbyBlZGl0IGdhbWUtc3BlY2lmaWMgc2V0dGluZ3MsIGhpZ2hsaWdodCBhIGdhbWUgYW5kIHRoZW4gY2xpY2sgYCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgRWRpdCBHYW1lYCksYC4KRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiLi4vdXNpbmcvZ2xvYmFsX3NldHRpbmdzIn0pLGBnbG9iYWwgc2V0dGluZ3NgKSxgIGFuZCBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIuLi91c2luZy9nYW1lX3NldHRpbmdzIn0pLGBnYW1lIHNldHRpbmdzYCksYCBwYWdlcy4gYCksbWR4KCJoMiIseyJpZCI6ImtleXdvcmRzIn0sYEtleXdvcmRzYCksbWR4KCJwIixudWxsLGBUaGVyZSBhcmUgbWFueSByZWNvZ25pemVkIGNvbmZpZ3VyYXRpb24ga2V5d29yZHM6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAKcGF0aCAgICAgICAgICAgICAgIHN0cmluZyAgIFRoZSBwYXRoIHRvIHdoZXJlIGEgZ2FtZSdzIGRhdGEgZmlsZXMgYXJlCmF1dG9zYXZlX3BlcmlvZCAgICBudW1iZXIgICBUaGUgc2Vjb25kcyBiZXR3ZWVuIGF1dG9zYXZpbmcgKGRlZmF1bHQ6IDMwMCkKc2F2ZV9zbG90ICAgICAgICAgIG51bWJlciAgIFRoZSBzYXZlZCBnYW1lIG51bWJlciB0byBsb2FkIG9uIHN0YXJ0dXAuCnNhdmVwYXRoICAgICAgICAgICBzdHJpbmcgICBUaGUgcGF0aCB0byB3aGVyZSBhIGdhbWUgd2lsbCBzdG9yZSBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIGdhbWVzLgpzY3JlZW5zaG90cGF0aCAgICAgc3RyaW5nICAgVGhlIHBhdGggdG8gd2hlcmUgc2NyZWVuc2hvdHMgYXJlIHNhdmVkLgppY29ucGF0aCAgICAgICAgICAgc3RyaW5nICAgVGhlIHBhdGggdG8gd2hlcmUgdG8gbG9vayBmb3IgaWNvbnMgdG8gdXNlIGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5IGZvciB0aGUgU2N1bW1WTSBpY29uIGluIHRoZSBXaW5kb3dzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrYmFyIG9yIG1hY09TIFggRG9jayB3aGVuIHJ1bm5pbmcgYSBnYW1lLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGljb24gZmlsZXMgc2hvdWxkIGJlIG5hbWVkIGFmdGVyIHRoZSBnYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMgYW5kIGJlIGluIGljbyBmb3JtYXQgb24gV2luZG93cyBvciBwbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCBvbiBtYWNPUyBYLgp2ZXJzaW9uaW5mbyAgICAgICAgc3RyaW5nICAgVGhlIHZlcnNpb24gb2YgdGhlIFNjdW1tVk0gdGhhdCBjcmVhdGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiBmaWxlLgoKZ2FtZWlkICAgICAgICAgICAgIHN0cmluZyAgIFRoZSByZWFsIGlkIG9mIGEgZ2FtZS4gVXNlZnVsIGlmIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXZlcmFsIHZlcnNpb25zIG9mIHRoZSBzYW1lIGdhbWUsIGFuZCB3YW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgYWxpYXNlcyBmb3IgdGhlbS4gU2VlIHRoZSBleGFtcGxlLgpkZXNjcmlwdGlvbiAgICAgICAgc3RyaW5nICAgVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBnYW1lIGFzIGl0IHdpbGwgYXBwZWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgbGF1bmNoZXIuCgpsYW5ndWFnZSAgICAgICAgICAgc3RyaW5nICAgU3BlY2lmeSBsYW5ndWFnZSAoZW4sIHVzLCBkZSwgZnIsIGl0LCBwdCwgZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcCwgemgsIGtyLCBzZSwgZ2IsIGhiLCBjeiwgcnUpCnNwZWVjaF9tdXRlICAgICAgICBib29sICAgICBJZiB0cnVlLCBzcGVlY2ggaXMgbXV0ZWQKc3VidGl0bGVzICAgICAgICAgIGJvb2wgICAgIFNldCB0byB0cnVlIHRvIGVuYWJsZSBzdWJ0aXRsZXMuCnRhbGtzcGVlZCAgICAgICAgICBudW1iZXIgICBUZXh0IGRlbGF5IGluIFNDVU1NIGdhbWVzLCBvciB0ZXh0IHNwZWVkIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlciBnYW1lcy4KCmZ1bGxzY3JlZW4gICAgICAgICBib29sICAgICBGdWxsc2NyZWVuIG1vZGUKYXNwZWN0X3JhdGlvICAgICAgIGJvb2wgICAgIEVuYWJsZSBhc3BlY3QgcmF0aW8gY29ycmVjdGlvbgpnZnhfbW9kZSAgICAgICAgICAgc3RyaW5nICAgR3JhcGhpY3MgbW9kZSAobm9ybWFsLCAyeCwgM3gsIDJ4c2FpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIyeHNhaSwgc3VwZXJlYWdsZSwgYWR2bWFtZTJ4LCBhZHZtYW1lM3gsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocTJ4LCBocTN4LCB0djJ4LCBkb3RtYXRyaXgsIG9wZW5nbCkKZmlsdGVyaW5nICAgICAgICAgIGJvb2wgICAgIEVuYWJsZSBncmFwaGljcyBmaWx0ZXJpbmcKCmNvbmZpcm1fZXhpdCAgICAgICBib29sICAgICBBc2sgZm9yIGNvbmZpcm1hdGlvbiBieSB0aGUgdXNlciBiZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aXR0aW5nIChTREwgYmFja2VuZCBvbmx5KS4KY29uc29sZSAgICAgICAgICAgIGJvb2wgICAgIEVuYWJsZSB0aGUgY29uc29sZSB3aW5kb3cgKGRlZmF1bHQ6IGVuYWJsZWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoV2luZG93cyBvbmx5KS4KY2Ryb20gICAgICAgICAgICAgIG51bWJlciAgIE51bWJlciBvZiBDRC1ST00gdW5pdCB0byB1c2UgZm9yIGF1ZGlvLiBJZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnYXRpdmUsIGRvbid0IGV2ZW4gdHJ5IHRvIGFjY2VzcyB0aGUgQ0QtUk9NLgpqb3lzdGlja19udW0gICAgICAgbnVtYmVyICAgTnVtYmVyIG9mIGpveXN0aWNrIGRldmljZSB0byB1c2UgZm9yIGlucHV0CmNvbnRyb2xsZXJfbWFwX2RiICBzdHJpbmcgICBBIGN1c3RvbSBjb250cm9sbGVyIG1hcHBpbmcgZmlsZSB0byBsb2FkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBkZWZhdWx0IGRhdGFiYXNlIChTREwgYmFja2VuZCBvbmx5KS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE90aGVyd2lzZSwgZmlsZSBnYW1lY29udHJvbGxlcmRiLnR4dCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQgZnJvbSBleHRyYXBhdGguCm11c2ljX2RyaXZlciAgICAgICBzdHJpbmcgICBUaGUgbXVzaWMgZW5naW5lIHRvIHVzZS4Kb3BsX2RyaXZlciAgICAgICAgIHN0cmluZyAgIFRoZSBBZExpYiAoT1BMKSBlbXVsYXRvciB0byB1c2UuCm91dHB1dF9yYXRlICAgICAgICBudW1iZXIgICBUaGUgb3V0cHV0IHNhbXBsZSByYXRlIHRvIHVzZSwgaW4gSHouIFNlbnNpYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgYXJlIDExMDI1LCAyMjA1MCBhbmQgNDQxMDAuCmF1ZGlvX2J1ZmZlcl9zaXplICBudW1iZXIgICBPdmVycmlkZXMgdGhlIHNpemUgb2YgdGhlIGF1ZGlvIGJ1ZmZlci4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSBtdXN0IGJlIG9uZSBvZjogMjU2IDUxMiAxMDI0IDIwNDggNDA5NgogICAgICAgICAgICAgICAgICAgICAgICAgICAgODE5MiAxNjM4NCAzMjc2OC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIG91dHB1dF9yYXRlIHRvIGtlZXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvIGxhdGVuY3kgYmVsb3cgNDVtcy4KYWxzYV9wb3J0ICAgICAgICAgIHN0cmluZyAgIFBvcnQgdG8gdXNlIGZvciBvdXRwdXQgd2hlbiB1c2luZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFMU0EgbXVzaWMgZHJpdmVyLgptdXNpY192b2x1bWUgICAgICAgbnVtYmVyICAgVGhlIG11c2ljIHZvbHVtZSBzZXR0aW5nICgwLTI1NSkKbXVsdGlfbWlkaSAgICAgICAgIGJvb2wgICAgIElmIHRydWUsIGVuYWJsZSBjb21iaW5hdGlvbiBBZExpYiBhbmQgbmF0aXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSURJLgpzb3VuZGZvbnQgICAgICAgICAgc3RyaW5nICAgVGhlIFNvdW5kRm9udCB0byB1c2UgZm9yIE1JREkgcGxheWJhY2suIChPbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWQgYnkgc29tZSBNSURJIGRyaXZlcnMuKQpuYXRpdmVfbXQzMiAgICAgICAgYm9vbCAgICAgSWYgdHJ1ZSwgZGlzYWJsZSBHTSBlbXVsYXRpb24gYW5kIGFzc3VtZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBhIHRydWUgUm9sYW5kIE1ULTMyIGF2YWlsYWJsZS4KZW5hYmxlX2dzICAgICAgICAgIGJvb2wgICAgIElmIHRydWUsIGVuYWJsZSBSb2xhbmQgR1Mtc3BlY2lmaWMgZmVhdHVyZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuaGFuY2UgR00gZW11bGF0aW9uLiBJZiBuYXRpdmVfbXQzMiBpcyBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLCB0aGUgR1MgZGV2aWNlIHdpbGwgc2VsZWN0IGFuIE1ULTMyIG1hcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gcGxheSB0aGUgY29ycmVjdCBpbnN0cnVtZW50cy4Kc2Z4X3ZvbHVtZSAgICAgICAgIG51bWJlciAgIFRoZSBzZnggdm9sdW1lIHNldHRpbmcgKDAtMjU1KQp0ZW1wbyAgICAgICAgICAgICAgbnVtYmVyICAgVGhlIG11c2ljIHRlbXBvICg1MC0yMDApIChkZWZhdWx0OiAxMDApCnNwZWVjaF92b2x1bWUgICAgICBudW1iZXIgICBUaGUgc3BlZWNoIHZvbHVtZSBzZXR0aW5nICgwLTI1NSkKbWlkaV9nYWluICAgICAgICAgIG51bWJlciAgIFRoZSBNSURJIGdhaW4gKDAtMTAwMCkgKGRlZmF1bHQ6IDEwMCkgKE9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZCBieSBzb21lIE1JREkgZHJpdmVycy4pCgpjb3B5X3Byb3RlY3Rpb24gICAgYm9vbCAgICAgRW5hYmxlIGNvcHkgcHJvdGVjdGlvbiBpbiBjZXJ0YWluIGdhbWVzLCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2UgY2FzZXMgd2hlcmUgU2N1bW1WTSBkaXNhYmxlcyBpdCBieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdC4KZGVtb19tb2RlICAgICAgICAgIGJvb2wgICAgIFN0YXJ0IGRlbW8gaW4gTWFuaWFjIE1hbnNpb24KYWx0X2ludHJvICAgICAgICAgIGJvb2wgICAgIFVzZSBhbHRlcm5hdGl2ZSBpbnRybyBmb3IgQ0QgdmVyc2lvbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJlbmVhdGggYSBTdGVlbCBTa3kgYW5kIEZsaWdodCBvZiB0aGUgQW1hem9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVlbgoKYm9vdF9wYXJhbSAgICAgICAgIG51bWJlciAgIFBhc3MgdGhpcyBudW1iZXIgdG8gdGhlIGJvb3Qgc2NyaXB0CmApKSxtZHgoImgyIix7ImlkIjoiZXhhbXBsZS1maWxlIn0sYEV4YW1wbGUgZmlsZWApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgW3NjdW1tdm1dCmdmeF9tb2RlPXN1cGVyZWFnbGUKZnVsbHNjcmVlbj10cnVlCnNhdmVwYXRoPUM6XFxzYXZlc1xcCgpbc2t5XQpwYXRoPUM6XFxnYW1lc1xcU3RlZWxTa3lcXAoKW2dlcm1hbnNreV0KZ2FtZWlkPXNreQpsYW5ndWFnZT1kZQpwYXRoPUM6XFxnYW1lc1xcU3RlZWxTa3lcXApkZXNjcmlwdGlvbj1CZW5lYXRoIGEgU3RlZWwgU2t5IHcvIEdlcm1hbiBzdWJ0aXRsZXMKCltnZXJtYW5kb3R0XQpnYW1laWQ9dGVudGFjbGUKcGF0aD1DOlxcZ2VybWFuXFx0ZW50YWNsZVxcCmRlc2NyaXB0aW9uPUdlcm1hbiB2ZXJzaW9uIG9mIERPVFQKClt0ZW50YWNsZV0KcGF0aD1DOlxcdGVudGFjbGVcXApzdWJ0aXRsZXM9dHJ1ZQptdXNpY192b2x1bWU9NDAKc2Z4X3ZvbHVtZT0yNTUKCltsb29tY2RdCmNkcm9tPTEKcGF0aD1DOlxcbG9vbVxcCnRhbGtzcGVlZD01CnNhdmVwYXRoPUM6XFxsb29tXFxzYXZlc1xcCgpbbW9ua2V5Ml0KcGF0aD1DOlxcYW1pZ2FfbWkyXFwKbXVzaWNfZHJpdmVyPXdpbmRvd3MKYCkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}