{"remainingRequest":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/pi/ScummDocs/docs/proposal.md","dependencies":[{"path":"/home/pi/ScummDocs/docs/proposal.md","mtime":1592360699780},{"path":"/home/pi/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-proposal-md-73d.json","mtime":1592360737052},{"path":"/home/pi/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1592289020410},{"path":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1592289019887},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1592289109426},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1592289107125}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}