{"remainingRequest":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/ubuntu/ScummDocs/docs/advanced/configuration_file.md","dependencies":[{"path":"/home/ubuntu/ScummDocs/docs/advanced/configuration_file.md","mtime":1593044979113},{"path":"/home/ubuntu/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-advanced-configuration-file-md-d44.json","mtime":1593075836198},{"path":"/home/ubuntu/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1593044981332},{"path":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1593044981124},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1593044980177},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1593044980217}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}