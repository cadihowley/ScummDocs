{"remainingRequest":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/ubuntu/ScummDocs/docs/using/keyboard.md","dependencies":[{"path":"/home/ubuntu/ScummDocs/docs/using/keyboard.md","mtime":1593044979117},{"path":"/home/ubuntu/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-using-keyboard-md-8a5.json","mtime":1593076788708},{"path":"/home/ubuntu/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1593044981332},{"path":"/home/ubuntu/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1593044981124},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1593044980177},{"path":"/home/ubuntu/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1593044980217}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvdWJ1bnR1L1NjdW1tRG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidrZXlib2FyZCcsdGl0bGU6J0tleWJvYXJkIHNob3J0Y3V0cycsc2lkZWJhcl9sYWJlbDonS2V5Ym9hcmQgc2hvcnRjdXRzJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsiaWQiOiJ1c2luZy9rZXlib2FyZCIsInRpdGxlIjoiS2V5Ym9hcmQgc2hvcnRjdXRzIiwiZGVzY3JpcHRpb24iOiJTY3VtbVZNIHN1cHBvcnRzIHZhcmlvdXMgaW4tZ2FtZSBrZXlib2FyZCBzaG9ydGN1dHMuIiwic291cmNlIjoiQHNpdGUvZG9jcy91c2luZy9rZXlib2FyZC5tZCIsInBlcm1hbGluayI6Ii9TY3VtbURvY3MvdXNpbmcva2V5Ym9hcmQiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL1NjdW1tRG9jcy9kb2NzL3VzaW5nL2tleWJvYXJkLm1kIiwic2lkZWJhcl9sYWJlbCI6IktleWJvYXJkIHNob3J0Y3V0cyIsInNpZGViYXIiOiJzb21lU2lkZUJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiR2FtZSBzZXR0aW5ncyIsInBlcm1hbGluayI6Ii9TY3VtbURvY3MvdXNpbmcvZ2FtZV9zZXR0aW5ncyJ9LCJuZXh0Ijp7InRpdGxlIjoiQ29tbWFuZCBsaW5lIG9wdGlvbnMiLCJwZXJtYWxpbmsiOiIvU2N1bW1Eb2NzL2FkdmFuY2VkL2NvbW1hbmRfbGluZSJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1bXTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLGBTY3VtbVZNIHN1cHBvcnRzIHZhcmlvdXMgaW4tZ2FtZSBrZXlib2FyZCBzaG9ydGN1dHMuIGApLG1keCgiZGl2Iix7ImNsYXNzTmFtZSI6ImFkbW9uaXRpb24gYWRtb25pdGlvbi1ub3RlIGFsZXJ0IGFsZXJ0LS1zZWNvbmRhcnkifSxtZHgoImRpdiIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImRpdiJ9LHsiY2xhc3NOYW1lIjoiYWRtb25pdGlvbi1oZWFkaW5nIn0pLG1keCgiaDUiLHtwYXJlbnROYW1lOiJkaXYifSxtZHgoInNwYW4iLF9leHRlbmRzKHtwYXJlbnROYW1lOiJoNSJ9LHsiY2xhc3NOYW1lIjoiYWRtb25pdGlvbi1pY29uIn0pLG1keCgic3ZnIixfZXh0ZW5kcyh7cGFyZW50TmFtZToic3BhbiJ9LHsieG1sbnMiOiJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsIndpZHRoIjoiMTQiLCJoZWlnaHQiOiIxNiIsInZpZXdCb3giOiIwIDAgMTQgMTYifSksbWR4KCJwYXRoIixfZXh0ZW5kcyh7cGFyZW50TmFtZToic3ZnIn0seyJmaWxsUnVsZSI6ImV2ZW5vZGQiLCJkIjoiTTYuMyA1LjY5YS45NDIuOTQyIDAgMCAxLS4yOC0uN2MwLS4yOC4wOS0uNTIuMjgtLjcuMTktLjE4LjQyLS4yOC43LS4yOC4yOCAwIC41Mi4wOS43LjI4LjE4LjE5LjI4LjQyLjI4LjcgMCAuMjgtLjA5LjUyLS4yOC43YTEgMSAwIDAgMS0uNy4zYy0uMjggMC0uNTItLjExLS43LS4zek04IDcuOTljLS4wMi0uMjUtLjExLS40OC0uMzEtLjY5LS4yLS4xOS0uNDItLjMtLjY5LS4zMUg2Yy0uMjcuMDItLjQ4LjEzLS42OS4zMS0uMi4yLS4zLjQ0LS4zMS42OWgxdjNjLjAyLjI3LjExLjUuMzEuNjkuMi4yLjQyLjMxLjY5LjMxaDFjLjI3IDAgLjQ4LS4xMS42OS0uMzEuMi0uMTkuMy0uNDIuMzEtLjY5SDhWNy45OHYuMDF6TTcgMi4zYy0zLjE0IDAtNS43IDIuNTQtNS43IDUuNjggMCAzLjE0IDIuNTYgNS43IDUuNyA1LjdzNS43LTIuNTUgNS43LTUuN2MwLTMuMTUtMi41Ni01LjY5LTUuNy01LjY5di4wMXpNNyAuOThjMy44NiAwIDcgMy4xNCA3IDdzLTMuMTQgNy03IDctNy0zLjEyLTctNyAzLjE0LTcgNy03eiJ9KSkpKSxgbm90ZWApKSxtZHgoImRpdiIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImRpdiJ9LHsiY2xhc3NOYW1lIjoiYWRtb25pdGlvbi1jb250ZW50In0pLG1keCgicCIse3BhcmVudE5hbWU6ImRpdiJ9LGBVc2luZyBDdHJsK2Ygb3IgQ3RybCtnIGlzIG5vdCByZWNvbW1lbmRlZC4gR2FtZXMgY2FuIGNyYXNoIHdoZW4gYmVpbmcgcnVuIGZhc3RlciB0aGFuIHRoZWlyIG5vcm1hbCBzcGVlZCwgYXMgc2NyaXB0cyB3aWxsIGxvc2Ugc3luY2hyb25pc2F0aW9uLmApKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBDb21tb246CiAgICBDdHJsK0Y1ICAgICAgICAgICAgICAgIC0gRGlzcGxheXMgdGhlIEdsb2JhbCBNZW51CiAgICBDbWQrcSAgICAgICAgICAgICAgICAgIC0gUXVpdCAoTWFjIE9TIFgpCiAgICBDdHJsK3EgICAgICAgICAgICAgICAgIC0gUXVpdCAob3RoZXIgdW5pY2VzIGluY2x1ZGluZyBMaW51eCkKICAgIEFsdCtGNCAgICAgICAgICAgICAgICAgLSBRdWl0IChXaW5kb3dzKQogICAgQ3RybCt6ICAgICAgICAgICAgICAgICAtIFF1aXQgKG90aGVyIHBsYXRmb3JtcykKICAgIEN0cmwrdSAgICAgICAgICAgICAgICAgLSBNdXRlIGFsbCBzb3VuZHMKICAgIEN0cmwrbSAgICAgICAgICAgICAgICAgLSBUb2dnbGUgbW91c2UgY2FwdHVyZQogICAgQ3RybCtBbHQgMS04ICAgICAgICAgICAtIFN3aXRjaCBiZXR3ZWVuIGdyYXBoaWNzIGZpbHRlcnMKICAgIEN0cmwrQWx0ICsgYW5kIC0gICAgICAgLSBJbmNyZWFzZS9EZWNyZWFzZSB0aGUgc2NhbGUgZmFjdG9yCiAgICBDdHJsK0FsdCBhICAgICAgICAgICAgIC0gVG9nZ2xlIGFzcGVjdC1yYXRpbyBjb3JyZWN0aW9uIG9uL29mZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vc3Qgb2YgdGhlIGdhbWVzIHVzZSBhIDMyMHgyMDAgcGl4ZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uLCB3aGljaCBtYXkgbG9vayBzcXVhc2hlZCBvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVybiBtb25pdG9ycy4gQXNwZWN0LXJhdGlvIGNvcnJlY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJldGNoZXMgdGhlIGltYWdlIHRvIHVzZSAzMjB4MjQwIHBpeGVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RlYWQsIG9yIGEgbXVsdGlwbGUgdGhlcmVvZgogICAgQ3RybCtBbHQgZiAgICAgICAgICAgICAtIEVuYWJsZS9kaXNhYmxlIGdyYXBoaWNzIGZpbHRlcmluZwogICAgQ3RybCtBbHQgcyAgICAgICAgICAgICAtIEN5Y2xlIHRocm91Z2ggc2NhbGluZyBtb2RlcwogICAgQWx0K0VudGVyICAgICAgICAgICAgICAtIFRvZ2dsZXMgZnVsbCBzY3JlZW4vd2luZG93ZWQKICAgIEFsdCtzICAgICAgICAgICAgICAgICAgLSBNYWtlIGEgc2NyZWVuc2hvdCAoU0RMIGJhY2tlbmQgb25seSkKICAgIEN0cmwrRjcgICAgICAgICAgICAgICAgLSBPcGVuIHZpcnR1YWwga2V5Ym9hcmQgKGlmIGVuYWJsZWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBjYW4gYWxzbyBiZSB0cmlnZ2VyZWQgYnkgYSBsb25nIHByZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1pZGRsZSBtb3VzZSBidXR0b24gb3Igd2hlZWwuCgogIFNDVU1NIGdhbWVzOgogICAgQWx0K3ggICAgICAgICAgICAgICAgICAtIFF1aXQKICAgIEN0cmwgMC05IGFuZCBBbHQgMC05ICAgLSBMb2FkIGFuZCBzYXZlIGdhbWUgc3RhdGUKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgQ3RybCtnICAgICAgICAgICAgICAgICAtIFJ1bnMgaW4gcmVhbGx5IFJFQUxMWSBmYXN0IG1vZGUKICAgIEN0cmwrdCAgICAgICAgICAgICAgICAgLSBTd2l0Y2ggYmV0d2VlbiAnU3BlZWNoIG9ubHknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTcGVlY2ggYW5kIFN1YnRpdGxlcycgYW5kICdTdWJ0aXRsZXMgb25seScKICAgIFRpbGRlICh+KSAgICAgICAgICAgICAgLSBTaG93L2hpZGUgdGhlIGRlYnVnZ2luZyBjb25zb2xlCiAgICBbIGFuZCBdICAgICAgICAgICAgICAgIC0gTXVzaWMgdm9sdW1lLCBkb3duL3VwCiAgICAtIGFuZCArICAgICAgICAgICAgICAgIC0gVGV4dCBzcGVlZCwgc2xvd2VyL2Zhc3RlcgogICAgRjUgICAgICAgICAgICAgICAgICAgICAtIERpc3BsYXlzIGEgc2F2ZS9sb2FkIGJveAogICAgQWx0K0Y1ICAgICAgICAgICAgICAgICAtIERpc3BsYXlzIHRoZSBvcmlnaW5hbCBzYXZlL2xvYWQgYm94LCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lIGhhcyBvbmUuIFlvdSBjYW4gc2F2ZSBhbmQgbG9hZCBnYW1lcyB1c2luZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsIGhvd2V2ZXIgaXQgaXMgbm90IGludGVuZGVkIGZvciB0aGlzIHB1cnBvc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG1heSBldmVuIGNyYXNoIFNjdW1tVk0gaW4gc29tZSBnYW1lcy4KICAgIFNwYWNlICAgICAgICAgICAgICAgICAgLSBQYXVzZXMKICAgIFBlcmlvZCAoLikgICAgICAgICAgICAgLSBTa2lwcyBjdXJyZW50IGxpbmUgb2YgdGV4dCBpbiBzb21lIGdhbWVzCiAgICBFbnRlciAgICAgICAgICAgICAgICAgIC0gU2ltdWxhdGUgbGVmdCBtb3VzZSBidXR0b24gcHJlc3MKICAgIFRhYiAgICAgICAgICAgICAgICAgICAgLSBTaW11bGF0ZSByaWdodCBtb3VzZSBidXR0b24gcHJlc3MKCiAgQmVuZWF0aCBhIFN0ZWVsIFNreToKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgQ3RybCtnICAgICAgICAgICAgICAgICAtIFJ1bnMgaW4gcmVhbGx5IFJFQUxMWSBmYXN0IG1vZGUKICAgIEY1ICAgICAgICAgICAgICAgICAgICAgLSBEaXNwbGF5cyBhIHNhdmUvbG9hZCBib3gKICAgIEVzY2FwZSAgICAgICAgICAgICAgICAgLSBTa2lwcyB0aGUgZ2FtZSBpbnRybwogICAgUGVyaW9kICguKSAgICAgICAgICAgICAtIFNraXBzIGN1cnJlbnQgbGluZSBvZiB0ZXh0CgogIEJsYWRlIFJ1bm5lcjoKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBTcGFjZSAgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGNvbWJhdCBtb2RlCiAgICBFbnRlciBvciBFc2NhcGUgICAgICAgIC0gU2tpcHMgYSB2aWRlbyBvciBhIGxpbmUgb2YgZGlhbG9ndWUKICAgIEVzY2FwZSAgICAgICAgICAgICAgICAgLSBTaG93IGdhbWUgbWVudQogICAgVGFiICAgICAgICAgICAgICAgICAgICAtIEFjdGl2YXRlIGxhc3QgZGF0YWJhc2UKICAgIEYxICAgICAgICAgICAgICAgICAgICAgLSBPbmxpbmUgaGVscAogICAgRjIgICAgICAgICAgICAgICAgICAgICAtIFNhdmUgZ2FtZSBtZW51CiAgICBGMyAgICAgICAgICAgICAgICAgICAgIC0gTG9hZCBnYW1lIG1lbnUKICAgIEY0ICAgICAgICAgICAgICAgICAgICAgLSBDcmltZSBzY2VuZSBkYXRhYmFzZQogICAgRjUgICAgICAgICAgICAgICAgICAgICAtIFN1c3BlY3QgZGF0YWJhc2UKICAgIEY2ICAgICAgICAgICAgICAgICAgICAgLSBDbHVlIGRhdGFiYXNlCiAgICBGMTAgICAgICAgICAgICAgICAgICAgIC0gUXVpdCBnYW1lCgogIEJyb2tlbiBTd29yZDoKICAgIEY1IG9yIEVzY2FwZSAgICAgICAgICAgLSBEaXNwbGF5cyBzYXZlL2xvYWQgYm94CgogIEJyb2tlbiBTd29yZCBJSToKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgcCAgICAgICAgICAgICAgICAgICAgICAtIFBhdXNlcwoKICBEcmFnb24gSGlzdG9yeToKICAgIEY1ICAgICAgICAgICAgICAgICAgICAgLSBEaXNwbGF5cyB0aGUgR2xvYmFsIE1lbnUKICAgIGxlZnQgY2xpY2sgICAgICAgICAgICAgLSBXYWxrLCBleHBsb3JlCiAgICByaWdodCBjbGljayAgICAgICAgICAgIC0gVXNlLCB0YWxrCiAgICBtb3ZlIG1vdXNlIHVwLCBpICAgICAgIC0gSW52ZW50b3J5CiAgICBtb3ZlIG1vdXNlIGRvd24sIG0gICAgIC0gTWFwCiAgICBFc2NhcGUgICAgICAgICAgICAgICAgIC0gU2tpcCB0aGUgaW50cm8sIGV4aXQgbWFwL2ludmVudG9yeQogICAgYW55IGNsaWNrICAgICAgICAgICAgICAtIFNraXAgdGhlIGN1cnJlbnRseSBkdWJiZWQgc2VudGVuY2UKICAgIHEgICAgICAgICAgICAgICAgICAgICAgLSBRdWljayB3YWxraW5nIG9uL29mZgoKICBGbGlnaHQgb2YgdGhlIEFtYXpvbiBRdWVlbjoKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgRjEgICAgICAgICAgICAgICAgICAgICAtIFVzZSBKb3VybmFsIChzYXZpbmcvbG9hZGluZykKICAgIEYxMSAgICAgICAgICAgICAgICAgICAgLSBRdWlja3NhdmUKICAgIEYxMiAgICAgICAgICAgICAgICAgICAgLSBRdWlja2xvYWQKICAgIEVzY2FwZSAgICAgICAgICAgICAgICAgLSBTa2lwcyBjdXRzY2VuZXMKICAgIFNwYWNlICAgICAgICAgICAgICAgICAgLSBTa2lwcyBjdXJyZW50IGxpbmUgb2YgdGV4dAoKICBGdXR1cmUgV2FyczoKICAgIEYxICAgICAgICAgICAgICAgICAgICAgLSBFeGFtaW5lCiAgICBGMiAgICAgICAgICAgICAgICAgICAgIC0gVGFrZQogICAgRjMgICAgICAgICAgICAgICAgICAgICAtIEludmVudG9yeQogICAgRjQgICAgICAgICAgICAgICAgICAgICAtIFVzZQogICAgRjUgICAgICAgICAgICAgICAgICAgICAtIEFjdGl2YXRlCiAgICBGNiAgICAgICAgICAgICAgICAgICAgIC0gU3BlYWsKICAgIEY5ICAgICAgICAgICAgICAgICAgICAgLSAiQWN0aXZhdGUiIG1lbnUKICAgIEYxMCAgICAgICAgICAgICAgICAgICAgLSAiVXNlIiBtZW51CiAgICBFc2NhcGUgICAgICAgICAgICAgICAgIC0gQnJpbmcgb24gY29tbWFuZCBtZW51CgogIEluZGlhbmEgSm9uZXMgYW5kIHRoZSBGYXRlIG9mIEF0bGFudGlzOgoKICAgIGkgICAgICAgICAgICAgICAgICAgICAgLSBEaXNwbGF5cyBJUSBwb2ludHMKCiAgSW5kaWFuYSBKb25lcyBhbmQgdGhlIExhc3QgQ3J1c2FkZToKCiAgICBpICAgICAgICAgICAgICAgICAgICAgIC0gRGlzcGxheXMgSVEgcG9pbnRzCgogIE5pcHBvbiBTYWZlczoKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBsICAgICAgICAgICAgICAgICAgICAgIC0gTG9hZCBnYW1lCiAgICBzICAgICAgICAgICAgICAgICAgICAgIC0gU2F2ZSBnYW1lCgogIFNpbW9uIHRoZSBTb3JjZXJlciAxIGFuZCAyOgogICAgQ3RybCAwLTkgYW5kIEFsdCAwLTkgICAtIExvYWQgYW5kIHNhdmUgZ2FtZSBzdGF0ZQogICAgQ3RybCtkICAgICAgICAgICAgICAgICAtIFN0YXJ0cyB0aGUgZGVidWdnZXIKICAgIEN0cmwrZiAgICAgICAgICAgICAgICAgLSBUb2dnbGUgZmFzdCBtb2RlCiAgICBGMSAtIEYzICAgICAgICAgICAgICAgIC0gVGV4dCBzcGVlZCwgZmFzdGVyIC0gc2xvd2VyCiAgICBGMTAgICAgICAgICAgICAgICAgICAgIC0gU2hvd3MgYWxsIGNoYXJhY3RlcnMgYW5kIG9iamVjdHMgeW91IGNhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0IHdpdGgKICAgIEVzY2FwZSAgICAgICAgICAgICAgICAgLSBTa2lwIGN1dHNjZW5lcwogICAgLSBhbmQgKyAgICAgICAgICAgICAgICAtIE11c2ljIHZvbHVtZSwgZG93bi91cAogICAgbSAgICAgICAgICAgICAgICAgICAgICAtIE11c2ljIG9uL29mZgogICAgcyAgICAgICAgICAgICAgICAgICAgICAtIFNvdW5kIGVmZmVjdHMgb24vb2ZmCiAgICBiICAgICAgICAgICAgICAgICAgICAgIC0gQmFja2dyb3VuZCBzb3VuZHMgb24vb2ZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpbW9uIHRoZSBTb3JjZXJlciAyIG9ubHldCiAgICBQYXVzZSAgICAgICAgICAgICAgICAgIC0gUGF1c2VzCiAgICB0ICAgICAgICAgICAgICAgICAgICAgIC0gU3dpdGNoIGJldHdlZW4gc3BlZWNoIG9ubHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZWQgc3BlZWNoIGFuZCBzdWJ0aXRsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2ltb24gdGhlIFNvcmNlcmVyIDEgQ0QgKG90aGVyIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoIGFuZCBHZXJtYW4pIGFuZCBTaW1vbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3JjZXJlciAyIENEIChhbGwgbGFuZ3VhZ2VzKV0KICAgIHYgICAgICAgICAgICAgICAgICAgICAgLSBTd2l0Y2ggYmV0d2VlbiBzdWJ0aXRsZXMgb25seSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iaW5lZCBzcGVlY2ggYW5kIHN1YnRpdGxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaW1vbiB0aGUgU29yY2VyZXIgMiBDRCBvbmx5XQoKICBTaW1vbiB0aGUgU29yY2VyZXIncyBQdXp6bGUgUGFjazoKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgRjEyICAgICAgICAgICAgICAgICAgICAtIEhpZ2ggc3BlZWQgbW9kZSBvbi9vZmYgaW4gU3dhbXB5IEFkdmVudHVyZXMKICAgIC0gYW5kICsgICAgICAgICAgICAgICAgLSBNdXNpYyB2b2x1bWUsIGRvd24vdXAKICAgIG0gICAgICAgICAgICAgICAgICAgICAgLSBNdXNpYyBvbi9vZmYKICAgIHMgICAgICAgICAgICAgICAgICAgICAgLSBTb3VuZCBlZmZlY3RzIG9uL29mZgogICAgUGF1c2UgICAgICAgICAgICAgICAgICAtIFBhdXNlcwoKICBTdGFyc2hpcCBUaXRhbmljOgogICAgQ3RybCtjICAgICAgICAgICAgICAgICAtIE9wZW4gdXAgdGhlIGRldmVsb3BlcidzIGNoZWF0IHJvb20KICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBPcGVuIHVwIHRoZSBTY3VtbVZNIERlYnVnZ2VyCiAgICBMZWZ0IGNsaWNrICAgICAgICAgICAgIC0gTW92ZSBhY3Rpb24KICAgIFNoaWZ0LUxlZnQgY2xpY2sgICAgICAgLSBFZGl0IHJvb20gZ2x5cGggY2hldnJvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrIG1vdmVtZW50IHRyYW5zaXRpb25zCiAgICBSaWdodCBjbGljayAgICAgICAgICAgIC0gRWRpdCByb29tIGdseXBoIGNoZXZyb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBxdWljayB0cmFuc2l0aW9ucwogICAgTW91c2Ugd2hlZWwgICAgICAgICAgICAtIFNjcm9sbCB0aHJvdWdoIGl0ZW1zIChpbnZlbnRvcnksIGV0YykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGNvbnZlcnNhdGlvbiBsb2cKICAgIEFycm93IGtleXMgICAgICAgICAgICAgLSBNb3ZlbWVudC4gRG93biBhcnJvdy9iYWNrIGlzIG9ubHkgYXZhaWxhYmxlIGlmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiB2aWV3IGV4cGxpY2l0bHkgaGFzIGEgYmFja3dhcmRzIG1vdmVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4KICAgIEYxICAgICAgICAgICAgICAgICAgICAgLSBTd2l0Y2ggdG8gQ2hhdC1PLU1hdAogICAgRjIgICAgICAgICAgICAgICAgICAgICAtIFN3aXRjaCB0byBQZXJzb25hbCBCYWdnYWdlCiAgICBGMyAgICAgICAgICAgICAgICAgICAgIC0gU3dpdGNoIHRvIFJlbW90ZSBUaGluZ3VtbXkKICAgIEY0ICAgICAgICAgICAgICAgICAgICAgLSBTd2l0Y2ggdG8gRGVzaWduZXIgUm9vbSBOdW1iZXJzIChjaGV2cm9uIGxpc3QpCiAgICBGNSAgICAgICAgICAgICAgICAgICAgIC0gR01NIHNhdmUgbWVudQogICAgRjYgICAgICAgICAgICAgICAgICAgICAtIFN3aXRjaCB0byBSZWFsIExpZmUKICAgIEY3ICAgICAgICAgICAgICAgICAgICAgLSBHTU0gcmVzdG9yZSBtZW51CgogIFN0YXJzaGlwIFRpdGFuaWMgKFN0YXJmaWVsZCBQdXp6bGUpOgogICAgVGFiICAgICAgICAgICAgICAgICAgICAtIFRvZ2dsZSBiZXR3ZWVuIHN0YXJtYXAgYW5kIHNreXNjYXBlCiAgICBNb3VzZSBjbGljazogICAgICAgICAgIC0gc2t5c2NhcGUgc3RhciBzZWxlY3Rpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJtYXAgc3RhciBmYXN0IHRyYXZlbAogICAgTW91c2UgbW92ZW1lbnQgICAgICAgICAtIHN0YXJtYXAgb3JpZW50YXRpb24KICAgIFNQQUNFICAgICAgICAgICAgICAgICAgLSBzdGFybWFwIHN0b3AgbW92ZW1lbnQKICAgIHogICAgICAgICAgICAgICAgICAgICAgLSBzdGFybWFwIHR1cm4gbGVmdAogICAgeCAgICAgICAgICAgICAgICAgICAgICAtIHN0YXJtYXAgdHVybiByaWdodAogICAgU2luZ2xlIHF1b3RlICgnKSAgICAgICAtIHN0YXJtYXAgdHVybiB1cAogICAgRm9yd2FyZCBzbGFzaCAoLykgICAgICAtIHN0YXJtYXAgdHVybiBkb3duCiAgICBTZW1pY29sb24gKDspICAgICAgICAgIC0gc3Rhcm1hcCBtb3ZlIGZvcndhcmQKICAgIFBlcmlvZCAoLikgICAgICAgICAgICAgLSBzdGFybWFwIG1vdmUgYmFja3dhcmQKICAgIGwgICAgICAgICAgICAgICAgICAgICAgLSBzdGFybWFwIGxvY2sgY29vcmRpbmF0ZQogICAgZCAgICAgICAgICAgICAgICAgICAgICAtIHN0YXJtYXAgdW5sb2NrIGNvb3JkaW5hdGUKCiAgVGhlIEZlZWJsZSBGaWxlczoKICAgIEN0cmwrZCAgICAgICAgICAgICAgICAgLSBTdGFydHMgdGhlIGRlYnVnZ2VyCiAgICBDdHJsK2YgICAgICAgICAgICAgICAgIC0gVG9nZ2xlIGZhc3QgbW9kZQogICAgRjcgICAgICAgICAgICAgICAgICAgICAtIFN3aXRjaCBjaGFyYWN0ZXJzCiAgICBGOSAgICAgICAgICAgICAgICAgICAgIC0gSGl0Ym94IG5hbWVzIG9uL29mZgogICAgcyAgICAgICAgICAgICAgICAgICAgICAtIFNvdW5kIGVmZmVjdHMgb24vb2ZmCiAgICBQYXVzZSAgICAgICAgICAgICAgICAgIC0gUGF1c2VzCiAgICB0ICAgICAgICAgICAgICAgICAgICAgIC0gU3dpdGNoIGJldHdlZW4gc3BlZWNoIG9ubHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZWQgc3BlZWNoIGFuZCBzdWJ0aXRsZXMKICAgIHYgICAgICAgICAgICAgICAgICAgICAgLSBTd2l0Y2ggYmV0d2VlbiBzdWJ0aXRsZXMgb25seSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iaW5lZCBzcGVlY2ggYW5kIHN1YnRpdGxlcwoKICBUaGUgTGVnZW5kIG9mIEt5cmFuZGlhOgogICAgQ3RybCAwLTkgYW5kIEFsdCAwLTkgICAtIExvYWQgYW5kIHNhdmUgZ2FtZSBzdGF0ZQogICAgQ3RybC1kICAgICAgICAgICAgICAgICAtIFN0YXJ0cyB0aGUgZGVidWdnZXIKCiAgVGVlbkFnZW50CiAgICBGNSAgICAgICAgICAgICAgICAgICAgIC0gRGlzcGxheXMgdGhlIEdsb2JhbCBNZW51CgogIFRvdWNoZTogVGhlIEFkdmVudHVyZXMgb2YgdGhlIEZpZnRoIE11c2tldGVlcjoKICAgIEN0cmwrZiAgICAgICAgICAgICAgICAgLSBUb2dnbGUgZmFzdCBtb2RlCiAgICBGNSAgICAgICAgICAgICAgICAgICAgIC0gRGlzcGxheXMgb3B0aW9ucwogICAgRjkgICAgICAgICAgICAgICAgICAgICAtIFR1cm4gZmFzdCB3YWxrIG1vZGUgb24KICAgIEYxMCAgICAgICAgICAgICAgICAgICAgLSBUdXJuIGZhc3Qgd2FsayBtb2RlIG9mZgogICAgRXNjYXBlICAgICAgICAgICAgICAgICAtIFF1aXQKICAgIFNwYWNlICAgICAgICAgICAgICAgICAgLSBTa2lwcyBjdXJyZW50IGxpbmUgb2YgdGV4dAogICAgdCAgICAgICAgICAgICAgICAgICAgICAtIFN3aXRjaCBiZXR3ZWVuICdWb2ljZSBvbmx5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVm9pY2UgYW5kIFRleHQnIGFuZCAnVGV4dCBvbmx5JwoKICBab3JrOiBHcmFuZCBJbnF1aXNpdG9yOgogICAgQ3RybCtzICAgICAgICAgICAgICAgICAtIFNhdmUKICAgIEN0cmwrciAgICAgICAgICAgICAgICAgLSBSZXN0b3JlCiAgICBDdHJsK3EgICAgICAgICAgICAgICAgIC0gUXVpdAogICAgQ3RybCtwICAgICAgICAgICAgICAgICAtIFByZWZlcmVuY2VzCiAgICBGMSAgICAgICAgICAgICAgICAgICAgIC0gSGVscAogICAgRjUgICAgICAgICAgICAgICAgICAgICAtIEludmVudG9yeQogICAgRjYgICAgICAgICAgICAgICAgICAgICAtIFNwZWxsYm9vawogICAgRjcgICAgICAgICAgICAgICAgICAgICAtIFNjb3JlCiAgICBGOCAgICAgICAgICAgICAgICAgICAgIC0gUHV0IGF3YXkgY3VycmVudCBvYmplY3QvZm9yZ2V0IHNwZWxsCiAgICBGOSAgICAgICAgICAgICAgICAgICAgIC0gRXh0cmFjdCBjb2luIChtdXN0IGhhdmUgdGhlIGNvaW4gYmFnKQogICAgU3BhY2UgICAgICAgICAgICAgICAgICAtIFNraXBzIG1vdmllcwoKICBab3JrIE5lbWVzaXM6IFRoZSBGb3JiaWRkZW4gTGFuZHM6CiAgICBDdHJsK3MgICAgICAgICAgICAgICAgIC0gU2F2ZQogICAgQ3RybCtyICAgICAgICAgICAgICAgICAtIFJlc3RvcmUKICAgIEN0cmwrcSAgICAgICAgICAgICAgICAgLSBRdWl0CiAgICBDdHJsK3AgICAgICAgICAgICAgICAgIC0gUHJlZmVyZW5jZXMKICAgIFNwYWNlICAgICAgICAgICAgICAgICAgLSBTa2lwcyBtb3ZpZXMKCmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}