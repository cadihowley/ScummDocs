{"remainingRequest":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js??ref--8-1!/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/home/pi/ScummDocs/docs/about/how_does_it_work.md","dependencies":[{"path":"/home/pi/ScummDocs/docs/about/how_does_it_work.md","mtime":1592024350113},{"path":"/home/pi/ScummDocs/.docusaurus/docusaurus-plugin-content-docs/site-docs-about-how-does-it-work-md-b9d.json","mtime":1592360737042},{"path":"/home/pi/ScummDocs/node_modules/cache-loader/dist/cjs.js","mtime":1592289020410},{"path":"/home/pi/ScummDocs/node_modules/babel-loader/lib/index.js","mtime":1592289019887},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1592289109426},{"path":"/home/pi/ScummDocs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1592289107125}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}